/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import LNVentas.ManejadorVentas;
import clases.Producto;
import clases.Usuario;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SMART
 */
public class guiPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form guiPrincipal
     */
    ArrayList<Producto> listaProductos;
    ArrayList<Producto> listaPedidos = new ArrayList<>();
    Usuario u;
    
    
    public guiPrincipal(Usuario u) {
        initComponents();
        CargarProductos();
        this.setTitle("Bienvenid@ "+u.getNombre()+" "+u.getApellido()+"!");
        this.u=u;
        System.out.printf("%d %s %s %s %s %s", u.getDni(), u.getNombre(), u.getApellido(), u.getTelefono(), u.getCorreo(), u.getPass());
        jtbProducts.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);

    }

    private guiPrincipal() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    public void CargarProductos() {

        ManejadorVentas manejadorventa = new ManejadorVentas();
        listaProductos = new ArrayList<>();

        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();

        try {
            model.setColumnCount(6);
            listaProductos.addAll(manejadorventa.obtenerProducto());

            for (int i = 0; i < listaProductos.size(); i++) {
                Vector datos = new Vector();

                datos.add(listaProductos.get(i).getIdProducto());
                datos.add(listaProductos.get(i).getNombre());
                datos.add(listaProductos.get(i).getTipo());
                datos.add(listaProductos.get(i).getDescripcion());
                datos.add(listaProductos.get(i).getCantidad());
                datos.add(listaProductos.get(i).getPrecio());
                model.addRow(datos);
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        chbLegumbres = new javax.swing.JCheckBox();
        chbHortalizas = new javax.swing.JCheckBox();
        chbFrutas = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbProducts = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtMax = new javax.swing.JTextField();
        txtMin = new javax.swing.JTextField();
        btnPrecio = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();
        txtBuscar = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtbPedido = new javax.swing.JTable();
        btnNuevoProducto = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Categoria"));

        chbLegumbres.setText("Legumbres");
        chbLegumbres.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chbLegumbresMouseClicked(evt);
            }
        });

        chbHortalizas.setText("Hortalizas");
        chbHortalizas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chbHortalizasMouseClicked(evt);
            }
        });

        chbFrutas.setText("Frutas");
        chbFrutas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chbFrutasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chbLegumbres)
                    .addComponent(chbHortalizas)
                    .addComponent(chbFrutas))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chbLegumbres)
                .addGap(18, 18, 18)
                .addComponent(chbHortalizas)
                .addGap(18, 18, 18)
                .addComponent(chbFrutas)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Productos"));

        jtbProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Tipo", "Descripcion", "Disponible", "Precio"
            }
        ));
        jScrollPane1.setViewportView(jtbProducts);
        if (jtbProducts.getColumnModel().getColumnCount() > 0) {
            jtbProducts.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Precio"));

        jLabel1.setText("Desde:");

        jLabel2.setText("Hasta:");

        btnPrecio.setText("Filtrar");
        btnPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrecioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(41, 41, 41)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMax)
                            .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(btnPrecio)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(txtMax)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnPrecio))
        );

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        jButton1.setText("Siguiente");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAdd.setText("Agregar");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Pedido"));

        jtbPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Vendedor", "Telefono", "Producto", "Cantidad", "Precio"
            }
        ));
        jScrollPane2.setViewportView(jtbPedido);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        btnNuevoProducto.setText("Nuevo Producto");
        btnNuevoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoProductoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtBuscar)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuscar)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNuevoProducto)
                        .addGap(136, 136, 136)
                        .addComponent(jButton1)
                        .addGap(197, 197, 197))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(10, 10, 10)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(btnNuevoProducto)))
                .addGap(108, 108, 108))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        ManejadorVentas manejadorventas = new ManejadorVentas();
        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();
        model.setRowCount(0);
        ArrayList<Producto> busqueda;
        try {
            busqueda = manejadorventas.busquedaProductosNombre(this.txtBuscar.getText());

            for (int i = 0; i < busqueda.size(); i++) {
                Vector datos = new Vector();

                datos.add(busqueda.get(i).getIdProducto());
                datos.add(busqueda.get(i).getNombre());
                datos.add(busqueda.get(i).getTipo());
                datos.add(busqueda.get(i).getDescripcion());
                datos.add(busqueda.get(i).getCantidad());
                datos.add(busqueda.get(i).getPrecio());
                model.addRow(datos);

            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnBuscarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
        guiPedido rp= new guiPedido(listaPedidos,u);
        rp.setVisible(true);
        this.setVisible(false);
        this.dispose();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrecioActionPerformed
        // TODO add your handling code here:
        ManejadorVentas manejadorventas = new ManejadorVentas();
        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();
        model.setRowCount(0);
        ArrayList<Producto> busqueda;
        try {
            //Desde x precio
            if (txtMax.getText().isEmpty() == true && txtMin.getText().isEmpty() == false) {

                busqueda = manejadorventas.busquedaProductosPrecioMayor(Double.parseDouble(this.txtMin.getText()));
                for (int i = 0; i < busqueda.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(busqueda.get(i).getIdProducto());
                    datos.add(busqueda.get(i).getNombre());
                    datos.add(busqueda.get(i).getTipo());
                    datos.add(busqueda.get(i).getDescripcion());
                    datos.add(busqueda.get(i).getCantidad());
                    datos.add(busqueda.get(i).getPrecio());
                    model.addRow(datos);

                }
                //Hasta x precio
            } else if (txtMin.getText().isEmpty() == true && txtMax.getText().isEmpty() == false) {
                busqueda = manejadorventas.busquedaProductosPrecioMenor(Double.parseDouble(this.txtMax.getText()));
                for (int i = 0; i < busqueda.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(busqueda.get(i).getIdProducto());
                    datos.add(busqueda.get(i).getNombre());
                    datos.add(busqueda.get(i).getTipo());
                    datos.add(busqueda.get(i).getDescripcion());
                    datos.add(busqueda.get(i).getCantidad());
                    datos.add(busqueda.get(i).getPrecio());
                    model.addRow(datos);

                }
                //Entre X y Y precios
            } else if (txtMax.getText().isEmpty() == false && txtMin.getText().isEmpty() == false) {
                busqueda = manejadorventas.busquedaProductosPrecioEntre(Double.parseDouble(this.txtMin.getText()), Double.parseDouble(this.txtMax.getText()));
                for (int i = 0; i < busqueda.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(busqueda.get(i).getIdProducto());
                    datos.add(busqueda.get(i).getNombre());
                    datos.add(busqueda.get(i).getTipo());
                    datos.add(busqueda.get(i).getDescripcion());
                    datos.add(busqueda.get(i).getCantidad());
                    datos.add(busqueda.get(i).getPrecio());
                    model.addRow(datos);

                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnPrecioActionPerformed

    private void chbLegumbresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chbLegumbresMouseClicked
        // TODO add your handling code here:
        ManejadorVentas manejadorventas = new ManejadorVentas();
        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();
        ArrayList<Producto> filtro;

        try {
            if (chbHortalizas.isSelected() || chbFrutas.isSelected()) {
                if (chbHortalizas.isSelected() && !chbLegumbres.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Hortaliza");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else if (chbFrutas.isSelected() && !chbLegumbres.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Fruta");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else {
                    filtro = manejadorventas.busquedaProductosCategoria("Legumbre");
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                }
            } else {
                model.setRowCount(0);
                filtro = manejadorventas.busquedaProductosCategoria("Legumbre");
                for (int i = 0; i < filtro.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(filtro.get(i).getIdProducto());
                    datos.add(filtro.get(i).getNombre());
                    datos.add(filtro.get(i).getTipo());
                    datos.add(filtro.get(i).getDescripcion());
                    datos.add(filtro.get(i).getCantidad());
                    datos.add(filtro.get(i).getPrecio());
                    model.addRow(datos);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_chbLegumbresMouseClicked

    private void chbHortalizasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chbHortalizasMouseClicked
        // TODO add your handling code here:
        ManejadorVentas manejadorventas = new ManejadorVentas();
        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();
        ArrayList<Producto> filtro;

        try {
            if (chbLegumbres.isSelected() || chbFrutas.isSelected()) {
                if (chbLegumbres.isSelected() && !chbHortalizas.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Legumbre");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else if (chbFrutas.isSelected() && !chbHortalizas.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Fruta");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else {
                    filtro = manejadorventas.busquedaProductosCategoria("Hortaliza");
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                }
            } else {
                model.setRowCount(0);
                filtro = manejadorventas.busquedaProductosCategoria("Hortaliza");
                for (int i = 0; i < filtro.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(filtro.get(i).getIdProducto());
                    datos.add(filtro.get(i).getNombre());
                    datos.add(filtro.get(i).getTipo());
                    datos.add(filtro.get(i).getDescripcion());
                    datos.add(filtro.get(i).getCantidad());
                    datos.add(filtro.get(i).getPrecio());
                    model.addRow(datos);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chbHortalizasMouseClicked

    private void chbFrutasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chbFrutasMouseClicked
        // TODO add your handling code here:
        ManejadorVentas manejadorventas = new ManejadorVentas();
        DefaultTableModel model = (DefaultTableModel) this.jtbProducts.getModel();
        ArrayList<Producto> filtro;

        try {
            if (chbLegumbres.isSelected() || chbHortalizas.isSelected()) {
                if (chbLegumbres.isSelected() && !chbFrutas.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Legumbre");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else if (chbHortalizas.isSelected() && !chbFrutas.isSelected()) {
                    filtro = manejadorventas.busquedaProductosCategoria("Hortaliza");
                    model.setRowCount(0);
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                } else {
                    filtro = manejadorventas.busquedaProductosCategoria("Fruta");
                    for (int i = 0; i < filtro.size(); i++) {
                        Vector datos = new Vector();

                        datos.add(filtro.get(i).getIdProducto());
                        datos.add(filtro.get(i).getNombre());
                        datos.add(filtro.get(i).getTipo());
                        datos.add(filtro.get(i).getDescripcion());
                        datos.add(filtro.get(i).getCantidad());
                        datos.add(filtro.get(i).getPrecio());
                        model.addRow(datos);
                    }
                }
            } else {
                model.setRowCount(0);
                filtro = manejadorventas.busquedaProductosCategoria("Fruta");
                for (int i = 0; i < filtro.size(); i++) {
                    Vector datos = new Vector();

                    datos.add(filtro.get(i).getIdProducto());
                    datos.add(filtro.get(i).getNombre());
                    datos.add(filtro.get(i).getTipo());
                    datos.add(filtro.get(i).getDescripcion());
                    datos.add(filtro.get(i).getCantidad());
                    datos.add(filtro.get(i).getPrecio());
                    model.addRow(datos);
                }
            }

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_chbFrutasMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) this.jtbPedido.getModel();
        ManejadorVentas mv = new ManejadorVentas();
        Usuario u = null;
        int row = jtbProducts.getSelectedRow();
        int id = Integer.parseInt(jtbProducts.getValueAt(row, 0).toString());

        double cantidad = Double.parseDouble(JOptionPane.showInputDialog("Cantidad a comprar: "));
        int x = buscarProducto(id, cantidad);
        try {
            u = mv.obtenerUsuarioCed(listaProductos.get(x).getIdPropietario());

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(guiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        Vector datos = new Vector();

        datos.add(listaProductos.get(x).getIdProducto());
        datos.add(u.getNombre());
        datos.add(u.getTelefono());
        datos.add(listaProductos.get(x).getNombre());
        datos.add(cantidad);
        datos.add(listaProductos.get(x).getPrecio());
        model.addRow(datos);

        Producto p = listaProductos.get(x);
        p.setCantidad(cantidad);
        listaPedidos.add(p);

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnNuevoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoProductoActionPerformed
        // TODO add your handling code here:
        guiRegistroProducto rp= new guiRegistroProducto(u);
        rp.setVisible(true);
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_btnNuevoProductoActionPerformed

    public int buscarProducto(int id, double cantidad) {
        int index = 0;
        for (int i = 0; i < this.listaProductos.size(); i++) {
            if (listaProductos.get(i).getIdProducto() == id) {
                index = i;
                listaProductos.get(i).setCantidad(listaProductos.get(i).getCantidad() - cantidad);
            }

        }
        return index;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(guiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(guiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(guiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(guiPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new guiPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnNuevoProducto;
    private javax.swing.JButton btnPrecio;
    private javax.swing.JCheckBox chbFrutas;
    private javax.swing.JCheckBox chbHortalizas;
    private javax.swing.JCheckBox chbLegumbres;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jtbPedido;
    private javax.swing.JTable jtbProducts;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtMax;
    private javax.swing.JTextField txtMin;
    // End of variables declaration//GEN-END:variables
}
